customRules:

  custom-rules-file.yaml: |-

    - macro: never_true
      condition: (evt.num=0)

    - macro: open_write
      condition: (evt.type in (open,openat,openat2) and evt.is_open_write=true and fd.typechar='f' and fd.num>=0)

    - macro: open_read
      condition: (evt.type in (open,openat,openat2) and evt.is_open_read=true and fd.typechar='f' and fd.num>=0)

    - macro: create_symlink
      condition: (evt.type in (symlink, symlinkat) and evt.dir=<)

    - macro: create_hardlink
      condition: (evt.type in (link, linkat) and evt.dir=<)

    - macro: process_exempt
      condition: (
        (container.id = host and (
        (proc.name in (systemd))
        or (proc.pname = systemd and proc.name in (kubelet, containerd, containerd-shim, dbus-daemon, systemd, systemd-journal, systemd-udevd))
        or (proc.aname[2] = systemd and proc.pname = cron and proc.name = cron)
        or (proc.aname[2] = systemd and proc.pname = systemd and proc.name = "(tmpfiles)")
        or (proc.aname[3] = systemd and proc.aname[2] = cron and proc.pname = cron and proc.name = cron)
        or (proc.aname[3] = systemd and proc.aname[2] = apt.systemd.dai and proc.pname = apt-config and proc.name = apt-config)
        or (proc.aname[4] = systemd and proc.aname[3] = apt.systemd.dai and proc.aname[2] = apt.systemd.dai and proc.pname = apt-config and proc.name = apt-config)
        or (proc.aname[4] = systemd and proc.aname[3] = apt.systemd.dai and proc.aname[2] = apt.systemd.dai and proc.pname = apt-get and proc.name = apt-get)
        ))
        or (k8s.pod.name startswith kube-apiserver- and proc.name = kube-apiserver)
        or (k8s.pod.name startswith etcd- and proc.name = etcd)
        or (k8s.pod.name startswith coredns- and proc.name = coredns)
        or (k8s.pod.name startswith kube-proxy- and proc.name in (kube-proxy))
        or (k8s.pod.name startswith kube-flannel- and proc.name in (flanneld))
        or (k8s.pod.name startswith falco- and proc.name in (falco, grpc_global_tim, falcoctl-bin))
        or (k8s.pod.name startswith falco-falcosidekick- and proc.name startswith falcosidekick)
        or (k8s.pod.name startswith falco-falcosidekick-ui- and proc.name startswith runc)
        or (k8s.pod.name startswith falco-falcosidekick-ui-redis- and proc.name in (redis-server, node))
        or (proc.aname[3] = systemd and proc.aname[2] = containerd-shim and proc.pname = runc and proc.name startswith runc)
        or (proc.aname[2] = systemd and proc.pname = containerd-shim and proc.name startswith runc)
        )

    - macro: libraries
      condition: (
        (fd.name = /etc/ld.so.cache)
        or (fd.name startswith /usr/lib/)
        or (fd.name startswith /lib/x86_64-linux-gnu/)
        )

    - macro: file_write
      condition: (
        (container.id = host and (
        proc.exepath = /usr/bin/kubelet
        or (proc.exepath = /usr/bin/apt-config and fd.name = /dev/null)
        or (proc.exepath = /usr/bin/apt-get and fd.name = /dev/null)
        or (proc.exepath = /usr/bin/gpgconf and fd.name = /dev/null)
        or (proc.exepath = /usr/bin/udevadm and fd.name = /proc/self/oom_score_adj)
        or (proc.exepath = /usr/bin/dash and fd.name in (/dev/null, /run/motd.dynamic.new))
        or (proc.exepath = /usr/bin/bash and fd.name in (/dev/tty, /root/.bash_history))
        or (proc.exepath = /usr/lib/systemd/systemd and fd.name startswith /run/systemd/transient/)
        or (proc.exepath = /usr/lib/systemd/systemd and fd.name startswith /sys/fs/cgroup/kubepods.slice/)
        or (proc.exepath = /usr/lib/systemd/systemd and fd.name startswith /sys/fs/cgroup/system.slice/)
        or (proc.exepath = /usr/lib/systemd/systemd-journald and fd.name startswith /run/systemd/journal/streams/)
        or (proc.exepath = /usr/lib/systemd/systemd-logind and fd.name startswith /run/systemd/sessions/)
        or (proc.exepath = /usr/lib/systemd/systemd-logind and fd.name startswith /run/systemd/users/)
        or (proc.exepath = /usr/local/bin/containerd and fd.name startswith /run/containerd/)
        or (proc.exepath = /usr/local/bin/containerd and fd.name startswith /proc/self/fd/)
        or (proc.exepath = /usr/local/bin/containerd and fd.name startswith /var/lib/containerd/)
        or (proc.exepath = /usr/local/bin/containerd and fd.name startswith /var/log/pods/)
        or (proc.exepath = /usr/local/bin/containerd-shim-runc-v2 and fd.name startswith /run/containerd/)
        or (proc.exepath = /usr/local/bin/containerd-shim-runc-v2 and fd.name startswith /proc/self/fd/)
        or (proc.exepath = /usr/local/bin/containerd-shim-runc-v2 and fd.name startswith /sys/fs/cgroup/)
        or (proc.exepath = /usr/sbin/runc and fd.name startswith /sys/fs/cgroup/)
        or (proc.exepath = /usr/sbin/runc and fd.name startswith /run/containerd/)
        or (proc.exepath = /usr/sbin/runc and fd.name startswith /proc/self/fd/)
        or (proc.exepath = /usr/sbin/runc and fd.name = /dev/null)
        or (proc.exepath = /usr/sbin/ssd and fd.name in (/dev/null, /dev/ptmx, /dev/pts/0, /dev/tty, /proc/self/oom_score_adj, /var/log/lastlog, /var/log/wtmp, /var/run/utmp))
        ))
        or (k8s.ns.name = kube-flannel and k8s.pod.name startswith kube-flannel and proc.exepath = /opt/bin/flanneld and fd.name = /dev/null)
        or (k8s.ns.name = falco and k8s.pod.name startswith falco-falcosidekick-ui-redis-
           and proc.exepath = /opt/redis-stack/bin/redis-server and fd.name startswith /data/)
        or (k8s.ns.name = falco and k8s.pod.name startswith falco-falcosidekick-ui-redis-
           and proc.exepath = /opt/redis-stack/nodejs/bin/node and fd.name startswith /redisinsight/commands/)
        or (k8s.ns.name = falco and k8s.pod.name startswith falco-falcosidekick-ui-redis-
           and proc.exepath = /opt/redis-stack/nodejs/bin/node and fd.name startswith /redisinsight/content/)
        or (k8s.ns.name = falco and k8s.pod.name startswith falco- and proc.exepath = /usr/bin/falcoctl and fd.name startswith /root/.sigstore/)
        or (k8s.ns.name = falco and k8s.pod.name startswith falco- and proc.exepath = /usr/bin/falcoctl and fd.name startswith /rulesfiles/)
        or (k8s.ns.name = falco and k8s.pod.name startswith falco- and proc.exepath = /usr/bin/falcoctl and fd.name startswith /tmp/falcoctl-)
        or (k8s.ns.name = falco and k8s.pod.name startswith falco- and proc.exepath = /usr/bin/falcoctl and fd.name startswith /root/.sigstore/)
        )

    - macro: file_read_exempt
      condition: (
        libraries
        )

    - macro: file_write_exempt
      condition: (
        file_write
        )

    - rule: Unexpected File Read
      desc: Detected unexpected File Read
      enabled: false
      condition: open_read and not file_read_exempt
      output: Detected Unexpected File Read (host=%evt.hostname file=%fd.name pcmdline=%proc.pcmdline gparent=%proc.aname[2] ggparent=%proc.aname[3] gggparent=%proc.aname[4] aname[5]=%proc.aname[5] aname[6]=%proc.aname[6] aname[7]=%proc.aname[7] evt_type=%evt.type read=%evt.is_open_read write=%evt.is_open_write user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)
      priority: WARNING
      tags: [catch_all, file, ktaka]

    - rule: Unexpected File Write
      desc: Detected unexpected File Write
      enabled: true
      condition: (open_write or create_symlink or create_hardlink) and not file_write_exempt
      output: Detected Unexpected File  Write (host=%evt.hostname file=%fd.name pcmdline=%proc.pcmdline gparent=%proc.aname[2] ggparent=%proc.aname[3] gggparent=%proc.aname[4] aname[5]=%proc.aname[5] aname[6]=%proc.aname[6] aname[7]=%proc.aname[7] evt_type=%evt.type read=%evt.is_open_read write=%evt.is_open_write user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)
      priority: WARNING
      tags: [catch_all, file, ktaka]
